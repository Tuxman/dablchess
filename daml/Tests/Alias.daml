-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Tests.Alias where

import Alias

import DA.Next.Map qualified as M
import DA.Next.Set qualified as S

userCanCreateAlaises = scenario do
  alice <- getParty "Alice"
  operator <- getParty "Ref"
  let publicParty = operator  -- Keep it simple for the tests.

  aliases <- submit operator do
              create Aliases with
                aliasToParty = M.empty
                partyToAlias = M.empty
                members = S.empty
                ..

  let alicesDesiredAlias = "Alice the Great"
  aliasRequest <- submit alice do
                    create AliasRequest with
                      user = alice
                      alias = alicesDesiredAlias
                      operator

  aliases <- submit operator do
          exercise aliases ProcessRequest with requestId = aliasRequest

  submit alice do
    (_, aliasMaps) <- fetchByKey @Aliases operator
    assertMsg "Alice can see the main map and has an alias" $ M.member alice aliasMaps.partyToAlias

  bob <- getParty "Bob"
  duplicateAliasRequest <- submit bob do
                            create AliasRequest with
                              user = bob
                              alias = alicesDesiredAlias
                              operator

  aliases <- submit operator do
          exercise aliases ProcessRequest with
            requestId = duplicateAliasRequest

  submit bob do
    (_, aliasMaps) <- fetchByKey @Aliases operator
    assertMsg "Bob can see the main map but doesn't have an alias." $ not $ M.member bob aliasMaps.partyToAlias

  -- Alice can clear an alias with the empty string
  emptyAliasRequest <- submit alice do
      create AliasRequest with
                user = alice
                alias = ""
                operator

  aliases <- submit operator do
          exercise aliases ProcessRequest with
            requestId = emptyAliasRequest

  submit bob do
    (_, aliasMaps) <- fetchByKey @Aliases operator
    assertMsg "Alice no longer has an alias" $ not $ M.member alice aliasMaps.partyToAlias

  -- Should Alice lose the right to see the aliases if she doesn't have one?
  -- Probably the correct state, as she can easily as for a new one.
  submitMustFail alice do fetchByKey @Aliases operator

  -- Bob can now impersonate
  bobImmitatesAlice <- submit bob do
                            create AliasRequest with
                              user = bob
                              alias = alicesDesiredAlias
                              operator

  aliases <- submit operator do
          exercise aliases ProcessRequest with
            requestId = bobImmitatesAlice

  submit bob do
    (_, aliasMaps) <- fetchByKey @Aliases operator
    assertMsg "Bob has an alias" $ M.member bob aliasMaps.partyToAlias
    assertMsg "Bob has Alice's desired alias" $ M.lookup bob aliasMaps.partyToAlias == Some alicesDesiredAlias

  return ()
