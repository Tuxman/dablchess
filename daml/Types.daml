-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Types where

import DA.Next.Map qualified as M

data PieceType =
  Pawn | Rook | Knight | Bishop | Queen | King
    deriving (Eq, Show, Ord)

data Side =
  Black | White
    deriving (Eq, Show, Ord)

opposite : Side -> Side
opposite White = Black
opposite Black = White

data Coord = A1 | A2 | A3 | A4 | A5 | A6 | A7 | A8
           | B1 | B2 | B3 | B4 | B5 | B6 | B7 | B8
           | C1 | C2 | C3 | C4 | C5 | C6 | C7 | C8
           | D1 | D2 | D3 | D4 | D5 | D6 | D7 | D8
           | E1 | E2 | E3 | E4 | E5 | E6 | E7 | E8
           | F1 | F2 | F3 | F4 | F5 | F6 | F7 | F8
           | G1 | G2 | G3 | G4 | G5 | G6 | G7 | G8
           | H1 | H2 | H3 | H4 | H5 | H6 | H7 | H8
    deriving (Eq, Show, Ord, Enum)

instance M.MapKey Coord where
  keyToText c = M.keyToText $ fromEnum c
  keyFromText t = toEnum $ M.keyFromText t

data Piece = Piece with
  coord : Coord
  tp : PieceType
  owner : Side
  moved : Bool
    deriving (Eq, Show, Ord)

data EverCheck = EverCheck with
  white : Bool
  black : Bool
    deriving (Eq, Show)

data ChessMove = ChessMove with
  from : Coord
  to : Coord
  by : Side
  promote : Optional PieceType
    deriving (Eq, Show)

type PieceMap = M.Map Coord Piece

data GameState = GameState with
  side : Side                 -- who's turn is it
  pieces : PieceMap           -- pieces on the board.
  inCheck : Bool              -- if side to move is in check  ... (in fog of war reveal the attacking piece?)
  everCheck : EverCheck       -- has either side been checked
  moves : [ChessMove]         -- stack of list moves
    deriving (Eq, Show)


type SplitPieceMap = M.Map Coord (Optional Piece) -- Some -> there's a piece , None -> there's no piece but we know that!

-- A game state suitable for fog of war.
data SplitGameState = SplitGameState with
  side : Side                 -- who's turn is it
  pieces : SplitPieceMap      -- pieces on the board.
  inCheck_ : Bool             -- if side to move is in check  ... (in fog of war reveal the attacking piece?)
  everCheck : EverCheck       -- has either side been checked
  moves : [ChessMove]         -- stack of list moves
    deriving (Eq, Show)

data DrawType a
  = PlayerDraw a
  | Stalemate
  | ThreefoldRepetition
  | FiftyMoveRule
    deriving (Eq, Show)

data DrawOrWinner a
  = Draw (DrawType a)
  | Winner a
    deriving (Eq, Show)

data MoveResult
  = DrawOrWinner (DrawOrWinner Side)
  | NewState GameState
  | Error Text
    deriving (Eq, Show)
